You are given a 2-D matrix grid. Each cell can have one of three possible values:

0 representing an empty cell
1 representing a fresh fruit
2 representing a rotten fruit
Every second, if a fresh fruit is horizontally or vertically adjacent to a rotten fruit, then the fresh fruit also becomes rotten.

Return the minimum number of seconds that must elapse until there are zero fresh fruits remaining. If this state is impossible within the grid, return -1.

class Solution {
    public int orangesRotting(int[][] grid) 
    {
        int maxtime=-1;
        Queue<int[]> rotten=new ArrayDeque<int[]>();
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==2)
                    rotten.add(new int[]{i, j});
            }
        }
        int qlength=rotten.size();
        for(int i=0;i<qlength;i++)
        {
            int[] pt=rotten.poll();
            grid[pt[0]][pt[1]]=1;
            int time=this.rot(grid, pt[0], pt[1]);
            System.out.println(time);
            if(time>maxtime)
                maxtime=time-1;
        }
        boolean exists1=false;
        boolean exists2=false;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==1)
                    exists1=true;
                if(grid[i][j]==2);
                    exists2=true;
            }
        }
        System.out.println(maxtime);
        if(exists1==true && exists2==true)
            return -1;
        if(exists2==false && exists1==false)
            return 0;
        return maxtime;
    }
    public int rot(int[][] grid, int r, int c)
    {
        if(Math.min(r,c)<0 || r==grid.length || c==grid[0].length)
            return 0;
        if(grid[r][c]!=1)
            return 0;
        grid[r][c]=2;
        int time=0;
        int[][] neighbours=new int[][]{{r,c+1}, {r,c-1}, {r-1,c}, {r+1,c}};
        int[] timearray=new int[4];
        int maxtime=0;
        for(int i=0;i<4;i++)
        {
            if(Math.min(neighbours[i][0],neighbours[i][1])<0 || neighbours[i][0]==grid.length || neighbours[i][1]==grid[0].length)
                continue;
            if(grid[neighbours[i][0]][neighbours[i][1]]==1)
            {
                timearray[i]=timearray[i]+rot(grid, neighbours[i][0], neighbours[i][1]);
                if(maxtime<timearray[i])
                    maxtime=timearray[i];
            }
        }
        time=time+maxtime+1;
        return time;
    }
}
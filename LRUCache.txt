Implement the Least Recently Used (LRU) cache class LRUCache. The class should support the following operations

LRUCache(int capacity) Initialize the LRU cache of size capacity.
int get(int key) Return the value cooresponding to the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the introduction of the new pair causes the cache to exceed its capacity, remove the least recently used key.
A key is considered used if a get or a put operation is called on it.

Ensure that get and put each run in 
ùëÇ
(
1
)
O(1) average time complexity.

Example 1:

Input:
["LRUCache", [2], "put", [1, 10],  "get", [1], "put", [2, 20], "put", [3, 30], "get", [2], "get", [1]]

Output:
[null, null, 10, null, null, 20, -1]

Explanation:
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 10);  // cache: {1=10}
lRUCache.get(1);      // return 10
lRUCache.put(2, 20);  // cache: {1=10, 2=20}
lRUCache.put(3, 30);  // cache: {2=20, 3=30}, key=1 was evicted
lRUCache.get(2);      // returns 20 
lRUCache.get(1);      // return -1 (not found)


class LRUCache 
{
    int cap;
    int size;
    HashMap<Integer, Integer> map;
    Queue<Integer> queue;
    public LRUCache(int capacity) 
    {
        size=0;
        cap=capacity;
        map=new HashMap<>(capacity);
        queue=new ArrayDeque<>();    
    }
    public int get(int key) 
    {
        if(map.containsKey(key))
        {
            queue.remove(key);
            queue.add(key);
            System.out.println("queue after getting: "+queue);
            return map.get(key);
        }
        else
        {
            System.out.println("queue after getting -1: "+queue);
            return -1;
        }
    }

    
    public void put(int key, int value) 
    {
        if(map.containsKey(key))
        {
            map.put(key, value);
            queue.remove(key);
            queue.add(key);
        }
        else
        {
            if(size==cap)
            {
                map.remove(queue.poll());
                map.put(key, value);
                queue.add(key);
            }
            else
            {
                map.put(key, value);
                queue.add(key);
                size++;
            }
        }
        System.out.println("queue after putting: "+queue);
        System.out.println("map after putting: "+ map);
    }
}
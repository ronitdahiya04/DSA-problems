public class DLListNode
{
    DLListNode next;
    DLListNode prev;
    int val;
    public DLListNode(int val)
    {
        this.val=val;
        this.prev=null;
        this.next=null;
    }
}
class DesignDLL 
{
    DLListNode head;
    DLListNode tail;
    public DesignDLL() 
    {
        head=new DLListNode(-1);
        tail=new DLListNode(-1);
        head.next=tail;
        tail.prev=head;
    }  
    public int get(int index) 
    {
        if(head.next==tail)
        {
            return -1;
        }
        else
        {
            DLListNode node=head.next;
            int i=0;
            while(i<index && node!=tail)
            {
                i++;
                node=node.next;
            }
            if(node==tail)
            {
                return -1;
            }
            else
            {
                return node.val;
            }
        }
    }
    
    public void addAtHead(int val) 
    {
        DLListNode node=new DLListNode(val);
        if(head.next==tail)
        {
            head.next=node;
            node.prev=head;
            tail.prev=node;
            node.next=tail;
        }
        else
        {
            node.prev=head;
            node.next=head.next;
            head.next.prev=node;
            head.next=node;
        }
        /*DLListNode test=head.next;
        while(test!=tail)
        {
            System.out.print(test.val+"->");
            test=test.next;
        }
        System.out.println();*/
    }
    
    public void addAtTail(int val) // CORRECT
    {
        if(head.next==tail)
        {
            this.addAtHead(val);
        }
        else
        {
            DLListNode node=new DLListNode(val);
            tail.prev.next=node;
            node.next=tail;
            node.prev=tail.prev;
            tail.prev=node;
        }
        /*DLListNode test=head.next;
        while(test!=tail)
        {
            System.out.print(test.val+"->");
            test=test.next;
        }
        System.out.println();*/
    }
    
    public void addAtIndex(int index, int val) 
    {
        if(head.next==tail)
        {
            if(index==0)
            {
                this.addAtHead(val);
            }
            else
            {}
        }
        else
        {
            int i=0;
            DLListNode node=head.next;
            while(i<index-1 && node!=tail)
            {
                i++;
                node=node.next;
            }
            if(node.next==tail || node==tail)
            {
                if(index==0)
                {
                    this.addAtHead(val);
                }
                else if(i==index-1)
                {
                    this.addAtTail(val);
                }
            }
            
            else if(node.next==tail)
            {
                System.out.println("tail");
            }
            else 
            {
                DLListNode newNode=new DLListNode(val);
                newNode.prev=node;
                newNode.next=node.next;
                node.next.prev=newNode;
                node.next=newNode;
            }
        }
        /*DLListNode test=head.next;
        while(test!=tail)
        {
            System.out.print(test.val+"->");
            test=test.next;
        }
        System.out.println();*/
    }
    
    public void deleteAtIndex(int index) 
    {
        if(head.next==tail)
        {}
        else if(index==0)
        {
            head.next.next.prev=head;
            head.next=head.next.next;
        }
        else
        {
            DLListNode node=head.next;
            int i=0;
            while(i<index-1 && node!=tail)
            {
                i++;
                node=node.next;
            }
            if(node==tail || node.next==tail)
            {}
            else
            {
                node.next.next.prev=node;
                node.next=node.next.next;
            }
        }
    }
}
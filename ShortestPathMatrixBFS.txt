Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.


class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) 
    {
        if(grid[0][0]==1)
            return -1;
        int rows=grid.length;
        int cols=grid[0].length;
        int[][] visited=new int[rows][cols];
        visited[0][0]=1;
        int length=1;
        Queue<int[]> points=new ArrayDeque<int[]>();
        points.add(new int[]{0,0});
        while(!points.isEmpty())
        {
            int qlength=points.size();
            for(int i=0;i<qlength;i++)
            {
                int[] point=points.poll();
                int r=point[0];
                int c=point[1];
                if(r==rows-1 && c==cols-1)
                    return length;
                visited[r][c]=1;
                int[][] nextpoints=new int[][]{{r,c+1}, {r,c-1}, {r+1,c}, {r-1,c}, {r+1,c+1}, {r+1,c-1}, {r-1,c+1}, {r-1,c-1}};
                for(int j=0;j<8;j++)
                {
                    int nextr=nextpoints[j][0];
                    int nextc=nextpoints[j][1];
                    if(Math.min(nextr,nextc)<0 || nextr==rows || nextc==cols || visited[nextr][nextc]==1 || grid[nextr][nextc]==1)
                        continue;
                    points.add(new int[]{nextr, nextc});
                }
            }
            length++;
        }
        return -1;
    }
}
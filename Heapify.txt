class MinHeap 
{
    List<Integer> heap;
    public MinHeap() 
    {
        heap=new ArrayList<Integer>();
        heap.add(-1);
    }

    public void push(int val) 
    {
        heap.add(val);
        if(heap.size() == 2)
            return;
        else
        {
            int i = heap.size() - 1;
            while(i>1 && heap.get(i) < heap.get(i/2))
            {
                int temp=heap.get(i);
                heap.set(i, heap.get(i/2));
                heap.set(i/2, temp);
                i=i/2;
            }
        }
    }

    public Integer pop() 
    {
        if(heap.size() <= 1)
            return -1;
        if(heap.size() == 2)
            return heap.remove(heap.size() - 1);
        int result=heap.get(1);
        heap.set(1, heap.remove(heap.size() - 1));
        int i=1;
        while(2*i < heap.size())
        {
            if((2*i + 1) < heap.size() && heap.get(2*1) > heap.get(2*i + 1) && heap.get(i) > heap.get(2*i + 1))
            {
                int temp = heap.get(i);
                heap.set(i, heap.get(2*i + 1));
                heap.set(2*i + 1, temp);
                i = (2*i + 1);
            }
            else if(heap.get(i) > heap.get(2*i))
            {
                int temp = heap.get(i);
                heap.set(i, heap.get(2*i));
                heap.set(2*i, temp);
                i=2*i;
            }
            else
                break;
        }
        return result;
    }

    public Integer top() 
    {
        if(heap.size() <= 1)
            return -1;
        return heap.get(1);
    }

    public void heapify(List<Integer> nums) 
    {
        if(nums.size() > 0)
        {
            nums.add(nums.get(0));
            heap=nums;
            int curr=((heap.size() - 1)/2);
            while(curr > 0)
            {
                int i=curr;
                while(2*i < heap.size())
                {
                    if((2*i + 1) < heap.size() && heap.get(2*1) > heap.get(2*i + 1) && heap.get(i) > heap.get(2*i + 1))
                    {
                        int temp = heap.get(i);
                        heap.set(i, heap.get(2*i + 1));
                        heap.set(2*i + 1, temp);
                        i = (2*i + 1);
                    }
                    else if(heap.get(i) > heap.get(2*i))
                    {
                        int temp = heap.get(i);
                        heap.set(i, heap.get(2*i));
                        heap.set(2*i, temp);
                        i=2*i;
                    }
                    else
                        break;
                }
                curr--;
            }
        }
        else
            heap.clear();
    }
}